#!/usr/bin/env python3
"""
Instagram Bot Setup and Configuration Script
Configura e instala todas as depend√™ncias necess√°rias para o bot do Instagram
"""

import os
import sys
import subprocess
import platform
import json
import shutil
from pathlib import Path
from typing import Dict, List, Optional

class InstagramBotSetup:
    """Classe para configura√ß√£o inicial do bot"""
    
    def __init__(self):
        self.project_root = Path.cwd()
        self.requirements_file = self.project_root / "requirements.txt"
        self.config_file = self.project_root / "config.json"
        self.templates_dir = self.project_root / "templates"
        self.logs_dir = self.project_root / "logs"
        self.exports_dir = self.project_root / "exports"
        
        # Detectar sistema operacional
        self.os_type = platform.system().lower()
        
    def print_header(self):
        """Imprime cabe√ßalho do setup"""
        print("=" * 60)
        print("ü§ñ INSTAGRAM AUTOMATION BOT - SETUP")
        print("=" * 60)
        print(f"Sistema operacional: {platform.system()}")
        print(f"Python: {sys.version}")
        print(f"Diret√≥rio do projeto: {self.project_root}")
        print("=" * 60)
    
    def check_python_version(self) -> bool:
        """Verifica se a vers√£o do Python √© compat√≠vel"""
        print("üêç Verificando vers√£o do Python...")
        
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ √© necess√°rio")
            print(f"   Vers√£o atual: {sys.version}")
            return False
        
        print("‚úÖ Vers√£o do Python compat√≠vel")
        return True
    
    def check_adb_installation(self) -> bool:
        """Verifica se ADB est√° instalado"""
        print("üì± Verificando instala√ß√£o do ADB...")
        
        try:
            result = subprocess.run(['adb', 'version'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            
            if result.returncode == 0:
                print("‚úÖ ADB encontrado")
                print(f"   Vers√£o: {result.stdout.split()[4]}")
                return True
            else:
                print("‚ùå ADB n√£o funciona corretamente")
                return False
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå ADB n√£o encontrado")
            self.show_adb_installation_instructions()
            return False
    
    def show_adb_installation_instructions(self):
        """Mostra instru√ß√µes para instalar ADB"""
        print("\nüìã INSTRU√á√ïES PARA INSTALAR ADB:")
        print("-" * 40)
        
        if self.os_type == "windows":
            print("Windows:")
            print("1. Baixe Android SDK Platform Tools:")
            print("   https://developer.android.com/studio/releases/platform-tools")
            print("2. Extraia em C:\\adb")
            print("3. Adicione C:\\adb ao PATH do sistema")
            print("4. Ou instale via Chocolatey: choco install adb")
            
        elif self.os_type == "darwin":  # macOS
            print("macOS:")
            print("1. Instale via Homebrew: brew install android-platform-tools")
            print("2. Ou baixe manualmente do link acima")
            
        elif self.os_type == "linux":
            print("Linux:")
            print("Ubuntu/Debian: sudo apt install android-tools-adb")
            print("Fedora: sudo dnf install android-tools")
            print("Arch: sudo pacman -S android-tools")
            
        print("\n‚ö†Ô∏è  Depois de instalar, reinicie o terminal e execute o setup novamente")
    
    def create_requirements_file(self):
        """Cria arquivo requirements.txt"""
        print("üì¶ Criando arquivo requirements.txt...")
        
        requirements = [
            "streamlit>=1.25.0",
            "pandas>=1.5.0",
            "sqlite3",  # Parte da stdlib do Python
            "schedule>=1.2.0",
            "opencv-python>=4.8.0",
            "numpy>=1.24.0",
            "pillow>=10.0.0",
            "plotly>=5.15.0",
            "openpyxl>=3.1.0",
            "pytesseract>=0.3.10",  # Opcional para OCR
            "requests>=2.31.0",
            "python-dateutil>=2.8.0",
            "psutil>=5.9.0",  # Para monitoramento do sistema
        ]
        
        with open(self.requirements_file, 'w') as f:
            for req in requirements:
                f.write(f"{req}\n")
        
        print(f"‚úÖ Arquivo criado: {self.requirements_file}")
    
    def install_dependencies(self) -> bool:
        """Instala depend√™ncias Python"""
        print("üì¶ Instalando depend√™ncias Python...")
        
        try:
            # Atualizar pip primeiro
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                         check=True)
            
            # Instalar depend√™ncias
            subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', str(self.requirements_file)], 
                         check=True)
            
            print("‚úÖ Depend√™ncias instaladas com sucesso")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            return False
    
    def create_directory_structure(self):
        """Cria estrutura de diret√≥rios"""
        print("üìÅ Criando estrutura de diret√≥rios...")
        
        directories = [
            self.templates_dir,
            self.logs_dir,
            self.exports_dir,
            self.project_root / "screenshots",
            self.project_root / "data",
            self.project_root / "configs"
        ]
        
        for directory in directories:
            directory.mkdir(exist_ok=True)
            print(f"   üìÅ {directory}")
        
        print("‚úÖ Estrutura de diret√≥rios criada")
    
    def create_config_file(self):
        """Cria arquivo de configura√ß√£o"""
        print("‚öôÔ∏è Criando arquivo de configura√ß√£o...")
        
        config = {
            "bot_settings": {
                "follow_interval_minutes": 5,
                "follows_per_batch": 5,
                "follow_back_check_hours": 24,
                "max_daily_follows": 100,
                "max_daily_unfollows": 50,
                "min_delay_seconds": 30,
                "max_delay_seconds": 120
            },
            "device_settings": {
                "device_id": "",
                "instagram_package": "com.instagram.android",
                "screen_timeout": 30
            },
            "safety_settings": {
                "enable_human_simulation": True,
                "random_delays": True,
                "coordinate_variance": 5,
                "max_actions_per_hour": 20
            },
            "logging": {
                "level": "INFO",
                "max_log_files": 10,
                "max_log_size_mb": 50
            },
            "database": {
                "path": "instagram_automation.db",
                "backup_interval_hours": 24
            }
        }
        
        with open(self.config_file, 'w') as f:
            json.dump(config, f, indent=4)
        
        print(f"‚úÖ Arquivo criado: {self.config_file}")
    
    def create_template_images(self):
        """Cria templates de exemplo para detec√ß√£o de bot√µes"""
        print("üñºÔ∏è Criando templates de exemplo...")
        
        template_info = {
            "follow_button.png": "Bot√£o 'Seguir' do Instagram",
            "following_button.png": "Bot√£o 'Seguindo' do Instagram", 
            "search_icon.png": "√çcone de busca",
            "home_icon.png": "√çcone da tela inicial",
            "profile_icon.png": "√çcone do perfil"
        }
        
        readme_content = """# Templates para Detec√ß√£o de Bot√µes

Esta pasta deve conter screenshots dos bot√µes do Instagram para detec√ß√£o autom√°tica.

## Como criar templates:

1. Abra o Instagram no seu dispositivo
2. Navegue at√© o bot√£o desejado
3. Tire um screenshot
4. Recorte apenas o bot√£o (deve ter fundo transparente se poss√≠vel)
5. Salve como PNG nesta pasta

## Templates necess√°rios:

"""
        
        for template, description in template_info.items():
            readme_content += f"- `{template}`: {description}\n"
        
        readme_content += """
## Dicas:

- Use resolu√ß√£o do seu dispositivo
- Bot√µes devem estar bem definidos
- Evite incluir texto que pode mudar
- Teste diferentes estados (claro/escuro)
"""
        
        with open(self.templates_dir / "README.md", 'w') as f:
            f.write(readme_content)
        
        print(f"‚úÖ README criado em: {self.templates_dir}")
    
    def create_startup_scripts(self):
        """Cria scripts de inicializa√ß√£o"""
        print("üöÄ Criando scripts de inicializa√ß√£o...")
        
        # Script para Windows
        if self.os_type == "windows":
            bat_content = """@echo off
echo Starting Instagram Bot...
python scheduler_system.py --mode cli
pause
"""
            with open(self.project_root / "start_bot.bat", 'w') as f:
                f.write(bat_content)
        
        # Script para Unix (Linux/macOS)
        sh_content = """#!/bin/bash
echo "Starting Instagram Bot..."
python3 scheduler_system.py --mode cli
"""
        with open(self.project_root / "start_bot.sh", 'w') as f:
            f.write(sh_content)
        
        # Tornar execut√°vel no Unix
        if self.os_type in ["linux", "darwin"]:
            os.chmod(self.project_root / "start_bot.sh", 0o755)
        
        print("‚úÖ Scripts de inicializa√ß√£o criados")
    
    def create_example_files(self):
        """Cria arquivos de exemplo"""
        print("üìÑ Criando arquivos de exemplo...")
        
        # Exemplo de Excel
        example_excel_content = """# Exemplo de estrutura do arquivo Excel

O arquivo Excel deve ter:
- Nome da planilha: 'contacts'
- Colunas obrigat√≥rias:
  - Username: nome de usu√°rio no Instagram (sem @)
  - Profile link: link do perfil completo

Exemplo:
| Username | Profile link |
|----------|-------------|
| joaosilva | https://instagram.com/joaosilva |
| mariasantos | https://instagram.com/mariasantos |
"""
        
        with open(self.project_root / "exemplo_excel.md", 'w') as f:
            f.write(example_excel_content)
        
        print("‚úÖ Arquivos de exemplo criados")
    
    def check_android_device(self) -> bool:
        """Verifica se h√° dispositivo Android conectado"""
        print("üì± Verificando dispositivos Android...")
        
        try:
            result = subprocess.run(['adb', 'devices'], 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=10)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                devices = [line for line in lines[1:] if line.strip() and 'device' in line]
                
                if devices:
                    print(f"‚úÖ {len(devices)} dispositivo(s) encontrado(s):")
                    for device in devices:
                        device_id = device.split('\t')[0]
                        print(f"   üì± {device_id}")
                    return True
                else:
                    print("‚ö†Ô∏è Nenhum dispositivo encontrado")
                    self.show_device_connection_instructions()
                    return False
            else:
                print("‚ùå Erro ao listar dispositivos")
                return False
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå N√£o foi poss√≠vel verificar dispositivos")
            return False
    
    def show_device_connection_instructions(self):
        """Mostra instru√ß√µes para conectar dispositivo"""
        print("\nüìã INSTRU√á√ïES PARA CONECTAR DISPOSITIVO:")
        print("-" * 45)
        print("1. Ative 'Op√ß√µes do desenvolvedor' no Android:")
        print("   - V√° em Configura√ß√µes > Sobre o telefone")
        print("   - Toque 7 vezes em 'N√∫mero da vers√£o'")
        print("2. Ative 'Depura√ß√£o USB' em Op√ß√µes do desenvolvedor")
        print("3. Conecte o dispositivo via USB")
        print("4. Aceite a autoriza√ß√£o de depura√ß√£o USB")
        print("5. Execute 'adb devices' para verificar")
        print("\nüìù Para usar emulador:")
        print("1. Instale Android Studio ou Bluestacks")
        print("2. Inicie um emulador Android")
        print("3. O emulador deve aparecer automaticamente")
    
    def test_instagram_access(self) -> bool:
        """Testa acesso ao Instagram"""
        print("üì± Testando acesso ao Instagram...")
        
        try:
            # Verificar se Instagram est√° instalado
            result = subprocess.run([
                'adb', 'shell', 'pm', 'list', 'packages', 'com.instagram.android'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and 'com.instagram.android' in result.stdout:
                print("‚úÖ Instagram encontrado no dispositivo")
                
                # Tentar iniciar Instagram
                result = subprocess.run([
                    'adb', 'shell', 'am', 'start', '-n', 
                    'com.instagram.android/com.instagram.android.activity.MainTabActivity'
                ], capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    print("‚úÖ Instagram iniciado com sucesso")
                    return True
                else:
                    print("‚ö†Ô∏è N√£o foi poss√≠vel iniciar o Instagram")
                    return False
            else:
                print("‚ùå Instagram n√£o est√° instalado no dispositivo")
                print("   Instale o Instagram e fa√ßa login antes de continuar")
                return False
                
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå Erro ao testar acesso ao Instagram")
            return False
    
    def run_setup(self) -> bool:
        """Executa setup completo"""
        self.print_header()
        
        # Lista de verifica√ß√µes
        checks = [
            ("Vers√£o do Python", self.check_python_version),
            ("Instala√ß√£o do ADB", self.check_adb_installation),
        ]
        
        # Executar verifica√ß√µes obrigat√≥rias
        for check_name, check_func in checks:
            if not check_func():
                print(f"\